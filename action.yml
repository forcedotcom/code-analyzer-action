name: 'Code Analyzer Action'
description: 'GHA to run Code Analyzer'
author: 'Roopa Mohan'
inputs:
  runtype:
    required: false
    description: 'Type of run. Valid values are "simple", "dfa". Defaults to "simple".'
    type: string
    default: 'simple'
  category:
    required: false
    description: 'Comma-separated categories to run'
    type: string
  engine:
    required: false
    description: 'Provide comma-separated values of Code Analyzer engine(s) to excecute. Defaults to Code Analyzer defaults based on runtype.'
    type: string
  env:
    required: false
    description: 'Override ESLint default environment variables, in JSON-formatted string'
    type: string
  eslintconfig:
    required: false
    description: 'Location of custom config to execute eslint engine'
    type: string
  outfile:
    required: false
    description: 'Output file to collect the results in. Format depends on the extension of the filename. Defaults to sfca_results.json'
    default: 'sfca_results.json'
  pathexplimit:
    required: false
    description: 'path expansion upper boundary limit. Can be used only with DFA runs.'
    type: number
  pmdconfig:
    required: false
    description: 'Location of PMD Rule Reference XML to customize PMD engine'
    type: string
  projectdir:
    required: false
    description: 'Path to project repository. Necessary when invoking sfge engine. Defaults to current directory.'
    type: string
  rule-disable-warning-violation:
    required: false
    description: 'Disables warning violations. Can be used only with DFA runs.'
    type: boolean
  rule-thread-count:
    required: false
    description: 'Number to threads to execute rules in Graph Engine. Can be used only with DFA runs.'
    type: number
  rule-thread-timeout:
    required: false
    description: 'Thread timeout in milliseconds on Graph Engine. Can be used only with DFA runs.'
    type: number
  severitythreshold:
    required: true
    description: 'Fail run when violation severity equals or exceeds this number'
    default: 3
  sfgejvmargs:
    required: false
    description: 'JVM args to control Graph Engine run. Can be used only with DFA runs.'
    type: string
  tsconfig:
    required: false
    description: 'Location of tsconfig file while executing eslint-typescript engine'
    type: string

runs:
  using: 'composite'
  steps:

  #### Part 1 - User input validation ####

  # Validate runtype and derive code analyzer command to execute
    - id: input-validations-start
      uses: actions/github-script@v6
      with:
        script: |
          core.startgroup

    - id: populate-command
      run: |
        echo "Populating command . . ."
        if [[ "${{ inputs.runtype }}" == 'simple' ]]; then
          COMMAND="scanner:run"
        elif [[ "${{ inputs.runtype }}" == 'dfa' ]]; then
          COMMAND="scanner:run:dfa"
        else
          echo "Unsupported runtype: ${{ inputs.runtype }}"
          exit 10
        fi
        echo "Command=$COMMAND" >> $GITHUB_OUTPUT
      shell: bash


  # Populate --outfile
    - id: populate-outfile
      run: |
        echo "Populating outfile . . ."
        OUTFILE="--outfile \"${{ inputs.outfile }}\""
        echo "Outfile=$OUTFILE" >> $GITHUB_OUTPUT
      shell: bash

  # Populate --category value based on input
    - id: populate-category
      run: |
        echo "Populating parameters . . ."
        if [[ "${{ inputs.category }}" == "" ]]; then
          CATEGORY=""
          echo "No category requested"
        else
          CATEGORY="--category \"${{ inputs.category }}\""
        fi
        echo "Category=$CATEGORY" >> $GITHUB_OUTPUT
      shell: bash

  # Populate --engine value based on input
    - id: populate-engine
      run: |
        echo "Populating parameters . . ."
        if [[ -n "${{ inputs.engine }}" ]]; then
          if [[ "${{ inputs.runtype }}" == 'simple' ]]; then
            ENGINE="--engine \"${{ inputs.engine }}\""
            echo "Engine=$ENGINE" >> $GITHUB_OUTPUT
          else
            echo "'engine' parameter can be used only with runtype 'simple'."
            exit 10
          fi
        fi
      shell: bash

  # Populate --env value based on input
    - id: populate-env
      run: |
        echo "Populating env . . ."
        if [[ "${{ inputs.env }}" == "" ]]; then
          ENV=""
          echo "No env requested"
        else
          ENV="--env \"${{ inputs.env }}\""
        fi
        echo "Env=$ENV" >> $GITHUB_OUTPUT
      shell: bash

  # Populate --eslintconfig value based on input
    - id: populate-eslintconfig
      run: |
        echo "Populating eslintconfig . . ."
        if [[ "${{ inputs.eslintconfig }}" == "" ]]; then
          ESLINTCONFIG=""
          echo "No eslintconfig requested"
        else
          ESLINTCONFIG="--env \"${{ inputs.eslintconfig }}\""
        fi
        echo "EslintConfig=$ESLINTCONFIG" >> $GITHUB_OUTPUT
      shell: bash

  # Populate --pmdconfig value based on input
    - id: populate-pmdconfig
      run: |
        echo "Populating pmdconfig . . ."
        if [[ "${{ inputs.pmdconfig }}" == "" ]]; then
          PMDCONFIG=""
          echo "No pmdconfig requested"
        else
          PMDCONFIG="--env \"${{ inputs.pmdconfig }}\""
        fi
        echo "PmdConfig=$PMDCONFIG" >> $GITHUB_OUTPUT
      shell: bash

  # Populate --severitythreshold
    - id: populate-sevthreshold
      run: |
        echo "Populating severitythreshold . . ."
        SEVTHRESHOLD="--severity-threshold ${{ inputs.severitythreshold}} "
        echo "SevThreshold=$SEVTHRESHOLD" >> $GITHUB_OUTPUT
      shell: bash

  # Populate --tsconfig value based on input
    - id: populate-tsconfig
      run: |
        echo "Populating tsconfig . . ."
        if [[ "${{ inputs.tsconfig }}" == "" ]]; then
          TSCONFIG=""
          echo "No tsconfig requested"
        else
          TSCONFIG="--env \"${{ inputs.tsconfig }}\""
        fi
        echo "TsConfig=$TSCONFIG" >> $GITHUB_OUTPUT
      shell: bash

  # Populate --projectdir if necessary
    - id: populate-projdir
      run: |
        echo "Evaluating need for projectdir . . ."
        if [[ "${{ inputs.engine}}" = *"sfge"* ]]; then
          PROJDIR_NEEDED="true"
          PROJDIR="--projectdir \"${{ inputs.projectdir }}\""
          echo "Input engine contains sfge. Project dir param = $PROJDIR"
        elif [[ "${{ inputs.runtype }}" == 'dfa' ]]; then
          PROJDIR_NEEDED="true"
          PROJDIR="--projectdir \"${{ inputs.projectdir }}\""
          echo "Run type is DFA. Project dir needed = $PROJDIR"
        else
          PROJDIR_NEEDED=
          PROJDIR=
          echo "Project dir is not needed"
        fi
        if [[ -n "$PROJDIR_NEEDED" && -z "${{ inputs.projectdir }}" ]]; then
          echo "'projectdir' is a required when invoking sfge. Add and rerun."
          exit 10
        fi
        echo "ProjDir=$PROJDIR" >> $GITHUB_OUTPUT
      shell: bash

    # Populate DFA-specific optional fields
    - id: dfa-populate-pathexpvalue
      run: |
        if [[ -n "${{ inputs.pathexplimit }}" ]]; then
          if [[ "${{ inputs.runtype }}" == 'dfa' ]]; then
            echo "Populating DFA optional param pathexpvalue"
            PATHEXPLIMIT="--pathexplimit ${{ inputs.pathexplimit }}"
            echo "PathExpLimit=$PATHEXPLIMIT" >> $GITHUB_OUTPUT
          else
            echo "pathexplimit should be provided only with runtype 'dfa'."
            exit 10
          fi 
        fi
      shell: bash
    - id: dfa-populate-sfgejvmargs
      run: |
        if [[ "${{ inputs.runtype }}" == 'dfa' ]]; then
          echo "Populating DFA optional param sfgejvmargs"
          if [[ -n "${{ inputs.sfgejvmargs }}" ]]; then
            SFGEJVMARGS="--sfgejvmargs ${{ inputs.sfgejvmargs }}"
            echo "SfgeJvmArgs=$SFGEJVMARGS" >> $GITHUB_OUTPUT
          else
            echo "SfgeJvmArgs=" >> $GITHUB_OUTPUT
          fi
        fi
      shell: bash
      
    - name: Build DFA-specific params
      id: populate-dfa-params
      shell: bash
      run: |
        if [[ "${{ inputs.runtype }}" == 'dfa' ]]; then
          DFA_PARAMS="${{steps.dfa-populate-pathexpvalue.outputs.PathExpLimit}}"
          DFA_PARAMS="$DFA_PARAMS ${{steps.dfa-populate-sfgejvmargs.outputs.SfgeJvmArgs}}"
          echo "DfaParams=$DFA_PARAMS" >> $GITHUB_OUTPUT
        else
          echo "DfaParams=" >> $GITHUB_OUTPUT
        fi

    - name: Display derived information
      run: |
        echo "Confirming parameters . . ."
        echo "Command = ${{steps.populate-command.outputs.Command}}"
        echo "Outfile = ${{steps.populate-outfile.outputs.Outfile}}"
        echo "Engine = ${{steps.populate-engine.outputs.Engine}}"
        echo "Category = ${{steps.populate-category.outputs.Category}}"
        echo "Env = ${{steps.populate-env.outputs.Env}}"
        echo "EslintConfig = ${{steps.populate-eslintconfig.outputs.EslintConfig}}"
        echo "PmdConfig = ${{steps.populate-pmdconfig.outputs.PmdConfig}}"
        echo "ProjDir = ${{steps.populate-projdir.outputs.ProjDir}}"
        echo "SevThreshold = ${{steps.populate-sevthreshold.outputs.SevThreshold}}"
        echo "TsConfig = ${{steps.populate-tsconfig.outputs.TsConfig}}"
        echo "DfaParams = ${{steps.populate-dfa-params.outputs.DfaParams}}"
      shell: bash

    - id: input-validations-end
      uses: actions/github-script@v6
      with:
        script: |
          core.endgroup

  #### Part 2 - Setup dependencies ####

  # Setup node
    - uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'

  # Setup JVM
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install Salesforce CLI
      run: |
        echo "Installing Salesforce CLI . . ."
        npm install -g sfdx-cli
      shell: bash

    - name: Install Salesforce Code Analyzer
      run: |
        echo "Installing Code Analyzer . . ."
        sfdx plugins:install @salesforce/sfdx-scanner
      shell: bash

  #### Part 3 - Checkout code and determine target files
    - uses: actions/checkout@v3

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v35
      with:
        files: ${{ inputs.targethome }}

    - id: populate-target
      shell: bash
      run: |
        TARGET_LIST=""
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          TARGET_LIST=$file,$TARGET_LIST
        done
        TARGET=${TARGET_LIST::-1}
        echo "Target=$TARGET" >> $GITHUB_OUTPUT


  #### Part 3 - Execute code analyzer ####

    - run: mkdir -p $HOME/sfca
      shell: bash

    - name: Execute Code Analyzer
      id: code-analyzer
      run: |
        sfdx ${{steps.populate-command.outputs.Command}} \
          --target "${{steps.populate-target.outputs.Target}}" \
          ${{steps.populate-engine.outputs.Engine}} \
          ${{steps.populate-category.outputs.Category}} \
          ${{steps.populate-env.outputs.Env}} \
          ${{steps.populate-eslintconfig.outputs.EslintConfig}} \
          ${{steps.populate-pmdconfig.outputs.PmdConfig}} \
          ${{steps.populate-projdir.outputs.ProjDir}} \
          ${{steps.populate-sevthreshold.outputs.SevThreshold}} \
          ${{steps.populate-tsconfig.outputs.TsConfig}} \
          ${{steps.populate-dfa-params.outputs.DfaParams}} \
          ${{steps.populate-outfile.outputs.Outfile}}
      shell: bash

    - if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: SFCA-Results
        path: ${{inputs.outfile}}

    - if: ${{steps.code-analyzer.outcome}} == "failure"
      uses: actions/github-script@v6
      with:
        script: |
          core.setFailed("Code Analyzer detected violations")
